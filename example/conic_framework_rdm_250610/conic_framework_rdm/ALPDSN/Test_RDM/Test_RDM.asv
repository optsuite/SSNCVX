clear;
% clc;
root_dir = '../..';
test_dir = '..';
addpath([root_dir]);
startup(root_dir);
% addpath(genpath(test_dir));
dir_results = "../results";
dir_data = addpath_data();
dir_logs = 'logs';

if ~exist("dataset", "var")
    dataset = "RDM";
end
instances = "all";
% if ~exist("instances", "var")
%     instances = "1et.256";
% end

if  numel(instances) == 1 && instances == "all"

    if dataset == "theta"
        probnames = thetaprobs;
    elseif dataset == "qap"
        probnames = qapprobs;
    elseif dataset == "DIMACS"
        probnames = ["nb", "nb_L1", "nb_L2", "nb_L2_bessel", "nql180", "nql30", "nql60", "qssp180", "qssp30", "qssp60", "sched_100_100_orig", "sched_100_100_scaled", "sched_100_50_orig", "sched_100_50_scaled", "sched_200_100_orig", "sched_200_100_scaled", "sched_50_50_orig", "sched_50_50_scaled"];
    elseif dataset == "CBLIB"
        probnames = ["2013_dsNRL", "2013_firL1", "2013_firL1Linfalph", "2013_firL1Linfeps", "2013_firL2L1alph",   "2013_firL2L1eps", "2013_firL2Linfalph", "2013_firL2Linfeps", "2013_firL2a", "2013_firLinf", "2013i_wbNRL", "beam30", "beam7", "chainsing-50000-1", "chainsing-50000-2","chainsing-50000-3", "db-joint-soerensen", "db-plate-yield-line"];
    elseif dataset == "sdplib"
        probnames = ["arch0", "arch2", "arch4", "arch8", "control1", "control10", "control11", "control2", "control3", "control4", "control5", "control6", "control7", "control8", "control9", "equalG11", "equalG51", "gpp100", "gpp124-1", "gpp124-2", "gpp124-3", "gpp124-4", "gpp250-1", "gpp250-2", "gpp250-3", "gpp250-4", "gpp500-1", "gpp500-2", "gpp500-3", "gpp500-4", "hinf1", "hinf10", "hinf11", "hinf12", "hinf13", "hinf14", "hinf15", "hinf2", "hinf3", "hinf4", "hinf5", "hinf6", "hinf7", "hinf8", "hinf9", "infd1", "infd2", "infp1", "infp2", "maxG11", "maxG32", "maxG51", "maxG55", "maxG60", "mcp100", "mcp124-1", "mcp124-2", "mcp124-3", "mcp124-4", "mcp250-1", "mcp250-2", "mcp250-3", "mcp250-4", "mcp500-1", "mcp500-2", "mcp500-3", "mcp500-4", "qap10", "qap5", "qap6", "qap7", "qap8", "qap9", "qpG11", "qpG51", "ss30", "theta1", "theta2", "theta3", "theta4", "theta5", "theta6", "thetaG11", "thetaG51", "truss1", "truss2", "truss3", "truss4", "truss5", "truss6", "truss7", "truss8"];
    elseif dataset == "theta+"
        probnames = thetaprobs;
    elseif dataset == "biq"
        probnames = biqprobs;
    elseif dataset == "fap"
        probnames = fapprobs;
    elseif dataset == "RDM"
        probnames = rdmproblem;
    elseif dataset == "R1TA"
        probnames = R1TAprobs;
    elseif dataset == "rcp"
        probnames = rcpprobs;
    end

else
    probnames = instances;
end

save_root = strcat(dir_results,'/' ,dataset);

% save_root_log = fullfile(save_root, "/log");
%
% if ~exist(save_root_log, 'dir')
%     mkdir(save_root_log)
% end

table_str = [];
timegeo = [];
file_len = length(probnames);
% for gamma1 = [0.5 0.55 0.45 0.4 0.6]
%     for gamma2 = [0.9 0.95 0.8  0.85]
% for gamma1 = [0.5]
for gamma2 = [0.9 0.85 0.8 0.95]%
    for i = 1:file_len
        probname = probnames{i};

        model = data2model(dataset,probname,dir_data);
        kk = length(model.K);
         modeltmp = model;
            lenk = 0;
            model.K = {};
            for ii = 1:kk
                tmpC2 = modeltmp.C{ii};
                Attmp = modeltmp.At{ii};
                cone2 = modeltmp.K{ii};
                blktmp = modeltmp.blk{ii,2};
                cumsum_size = [0 cumsum(cone2.size)];
                sqcumsum_size = [0 cumsum((cone2.size.^2 + cone2.size)/2  )];
                for jj = 1 : length(modeltmp.K{ii}.size)
                    cone2.size = modeltmp.K{ii}.size(jj);
                    if strcmp(modeltmp.K{ii}.type,'s')
                        model.C{lenk+jj,1} = tmpC2(cumsum_size(jj)+1:cumsum_size(jj+1),cumsum_size(jj)+1:cumsum_size(jj+1));
                        model.At{lenk+jj,1} = Attmp(sqcumsum_size(jj)+1:sqcumsum_size(jj+1),:);
                        model.blk{lenk+jj,2} = blktmp(jj);
                        model.K{lenk+jj,1} = cone2;
                    else
                        model.C{lenk+jj,1} = tmpC2;
                        model.At{lenk+jj,1} = Attmp;
                        model.K{lenk+jj,1} = cone2;
                        model.blk{lenk+jj,1} = blktmp(jj);
                    end
                end
                lenk = lenk + length(modeltmp.K{ii}.size);
            end
        save_path = char(strcat(save_root,'/rdm2allmu_update_itr12mu_fact1.5gamma10.45'));

        %   ssigxl = num2str(sigxl); %测试sigmax
        %   ssigxu = num2str(sigxu);
        %   sxfactor = num2str(xfactor);
        %     scgmax = num2str(cgmax); %测试cg迭代次数
        %     scgmin = num2str(cgmin);
        sgamma2 = num2str(gamma2);
        %             sgamma2 = num2str(gamma2);
        save_path = [save_path,'_',sgamma2,'/'];

        if ~exist(save_path, 'dir')
            mkdir(save_path)
        end
        save_root_mat = strcat(save_path, "/mat");
        if ~exist(save_root_mat, 'dir')
            mkdir(save_root_mat)
        end
        save_root_eig = strcat(save_path, "/eig");
        if ~exist(save_root_eig, 'dir')
            mkdir(save_root_eig)
        end
        save_root_res = strcat(save_path, "/res");
        if ~exist(save_root_res, 'dir')
            mkdir(save_root_res)
        end
        %         mu_update_itr = 15;
        %         mu_factor = 1.2;
        %         smu_update_itr = num2str(mu_update_itr); %测试sigmay
        %         smu_factor = num2str(mu_factor);
        %         smu_update_itr = strcat('new',smu_update_itr);
        table_str = [table_str char(probname)];
        L = [];
        U = [];
        OPTIONS.tol = 1e-6;
        OPTIONS.printlevel = 0;
        OPTIONS.stopoption = 0;
        opts = [];
        % opts.log_path = fullfile(save_root_log, probname + ".log");
        opts.log_path = "";
        opts.method = 'iterative';
        opts.tol = 1e-6;
        opts.record = 0;
        opts.save_path = save_path;
        opts.save_root = save_path;
        opts.basename = probname;
        opts.cgmin = 50; % best:100
        opts.cgmed = 300;
        opts.cgmax = 300; % best:700
        opts.sigxl = 0.3; % best:0.2
        opts.sigxm = 0.4; % best:0.2
        opts.sigxu = 0.4; % 0.3
        opts.xfactor = 1;
        opts.cgtol = 1e-10;
        opts.gamma1 = 0.45;
        opts.gamma2 = gamma2;
        opts.gamma3 = 5;
        opts.sigyl = 1; % best:0.2
        opts.sigym = 1; % best:0.2
        opts.sigyu = 1;
        opts.sigzl = 0.5;
        opts.sigzm = 0.5;
        opts.sigzu = 0.8;
        opts.sigql = 0.1;
        opts.sigqm = 0.1;
        opts.sigqu = 0.3;
        opts.gfactor = 5;
        opts.gfactor2 = 12;
        opts.muopts.mu_fact = 1.5; % 1.2 1.3 1.5 5/3
        opts.muopts.mu_update_itr = 10; % 12

        %
        %         [X, out, y, S] = SSNCP(model, opts);
        %             K = model.K;
        At = model.At;
        C = model.C;
        b = model.b;
        %             blk = model.blk;
        % for i = 1:length(K)
        % blk{i,1} = K{i}.type;
        % blk{i,2} = K{i}.size;
        % end
        L = [];
        U = [];
        model.L = L;
        model.U = U;
        if opts.record >=1
            fprintf("*************************************************************************************\n");
            fprintf("Solving problem %s from %s dataset ...\n", probname, dataset);
        end
        %                             profile on
        
        [X,out,y,S,Zb] = SSNCPplusallm(model,opts);
        %             [X,out,y,S] = SSNCP2RDM(blk,At,C,b,opts);
        %             profile off
        %             profile viewer
%         full(dot(model.C, X))
%         b'*y
        1;
        %             profsave
        1;

        %             profile report
        %             K = model.K;
        %             [X,out,y,S] = SSNCP4({K{1}.type,K{1}.size},model.At,model.C,model.b,opts);
        %                             profile off;
        %                             profile viewer
        %         [obj,X,~,y,S,Z,~,~,out,runhist] = ...
        %             sdpnalplus(blk,At,C,b,L,U,[],[],[],OPTIONS);
        iter = out.iter;
        time = out.totaltime;
        pinf = out.pinf;
        dinf = out.dinf;
        relgap = out.gap;
        pobj = out.pobj;
        dobj = out.dobj;
        Knorm = out.Knorm;
        %         pinf = norm(AXfun_sdpnal(blk,At,X) - b)/(1 + norm(b));
        %         dinf = ops(ops(ops(ops(Atyfun_sdpnal(blk,At,y),'+',S),'+',Z), ...
        %             '-',C),'norm')/(1 + ops(C,'norm'));
        %         pobj = full(ops(ops(C,'.*',X),'sum'));
        %         dobj = dualobj(b, y, Z, L, U);
        %         relgap = abs(pobj - dobj)/(1+abs(pobj)+abs(dobj));

        timegeo = [timegeo; time];
        X_rank = 0;
        S_rank = 0;
        n1= 0 ;
        for j = 1:length(model.K)
            X_item = X{j};
            [n, ~] = size(X_item);
            n1 = n1+n;
            m = length(y);

            %             if n < 3000
            %                 mat_save_path = fullfile(save_root_mat, probname + ".mat");
            %                 save(mat_save_path, 'X', 'y', 'S', 'out');
            %             end
            if strcmp(model.K{j}.type,'s')
                X_eig = eig(X_item);
                S_eig = eig(S{j});
            elseif strcmp(model.K{j}.type,'l')
                X_eig = X_item;
                S_eig = S{j};
            end
            %             eig_save_path = fullfile(save_root_eig, probname + "_eig.mat");
            %             save(eig_save_path, 'X_eig', 'S_eig');

            % X_rank = sum(X_eig-max(X_eig)*rank_thres>0);
            % S_rank = sum(S_eig-max(S_eig)*rank_thres>0);
            X_rank = X_rank + sum(X_eig - max(X_eig) * 1e-7 > 0);
            S_rank = S_rank + sum(S_eig - max(S_eig) * 1e-7 > 0);
        end
        etaK1 = out.K1; etaK2 = 0;
        etaC1 = out.C1; etaC2 = 0;

        table_str = [table_str, sprintf('& %d & %d & %.2e & %.2e & %.2e & %.2e & %.2e & %.2e & %.2e & %.2e & %d & %.1f & %d & %d & %d', ...
            m, n, pobj, pinf, dinf, relgap, etaK1, etaK2, etaC1, etaC2, iter, time, X_rank, S_rank,Knorm)];
        table_str = [table_str ' \\ \hline' newline];

        res_save_path = fullfile(save_root_res, probname + "_res.mat");
        save(res_save_path, 'm', 'n', 'pobj', 'pinf', 'dinf', 'relgap', 'etaK1', 'etaK2', 'etaC1', 'etaC2', 'iter', 'time', 'X_rank', 'S_rank','Knorm');

    end
    %     fprintf('时间的几何平均值为:%.2e,增长因子1为%.1e,增长因子2为%.1e\n',geo_mean(timegeo),gfactor,gfactor2)
    %         fprintf('时间的几何平均值为:%.2e,cg迭代次数最小为%d,cg迭代次数最大为%d\n',geo_mean(timegeo),mu_update_itr,mu_factor)
    %         fprintf('时间的几何平均值为:%.2e,cg每次迭代次数%.2e,sigma增大指数%.2e\n',geo_mean(timegeo),mu_update_itr,mu_factor)
    %         fprintf('时间的几何平均值为:%.2e,x指数为%.2e \n',geo_mean(timegeo),xfactor)
    result_path = './result.txt';
    fid = fopen(result_path,'a+');
    timegeo = geo_mean(timegeo);
    stimegeo = num2str(timegeo);
    sgamma1 = num2str(opts.gamma1);
    str = [newline,'mu_update_itr12mu_fact1.5时间的几何平均值为:',stimegeo,',gamm1的值为',sgamma1,',gamm2的值为',sgamma2,newline];
    fprintf(fid,'%s',str);
    fprintf('\n')
    fprintf('mu_update_itr12mu_fact1.5时间的几何平均值为:%.2e,gamm1的值为%.2e,gamm2的值为%.2e',timegeo,opts.gamma1,gamma2)
    fprintf('\n')
    timegeo  = [];

    %     end
end

disp(newline);
fprintf('%s & %s & %s & %s & %s & %s & %s & %s & %s & %s & %s & %s & %s & %s & %s & %s \\\\ \\hline \n', ...
    'probname', 'm', 'n', 'pobj', 'pinf', 'dinf', 'relgap', 'etaK1', 'etaK2', 'etaC1', 'etaC2', 'iter', 'time', 'X_rank', 'S_rank','Knorm');
disp(table_str);

save_path = fullfile(save_path, dataset + datestr(now, 'yyyymmdd') + ".txt");
fid = fopen(save_path, 'w+');
fprintf(fid, '%s', table_str);
